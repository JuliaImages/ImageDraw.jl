var documenterSearchIndex = {"docs":
[{"location":"references/#function_reference","page":"Function References","title":"Function References","text":"","category":"section"},{"location":"references/","page":"Function References","title":"Function References","text":"Pages = [\"reference.md\"]\nDepth = 3","category":"page"},{"location":"references/#Methods","page":"Function References","title":"Methods","text":"","category":"section"},{"location":"references/","page":"Function References","title":"Function References","text":"draw\ndraw!\nbresenham\nxiaolin_wu","category":"page"},{"location":"references/#ImageDraw.draw","page":"Function References","title":"ImageDraw.draw","text":"img_new = draw(img, drawable, color)\nimg_new = draw(img, [drawable], [color])\n\nDraws the drawable object on a copy of image img using color color. Can also draw multiple Drawable objects when passed as a AbstractVector{Drawable} with corresponding colors in [color]\n\n\n\n\n\ndraw(img::AbstractArray{T,2}, verts::Vector{CartesianIndex{2}}, f::AbstractPolyFillAlgorithm; closed::Bool)\n\nDraw on img using algorithm f.\n\nOutput\n\nWhen img is specified, a copy of img is made and changes are made on it and returned.\n\nExample\n\nJust simply pass an algorithm with parameters, with image and vertices of polygon\n\nusing ImageDraw\n\nimg = zeros(RGB, 7, 7)\nexpected = copy(img)\nexpected[2:6, 2:6] .= RGB{N0f8}(1)\n\nverts = [CartesianIndex(2, 2), CartesianIndex(2, 6), CartesianIndex(6, 6), CartesianIndex(6, 2), CartesianIndex(2,2)]\n\nres = draw(img, verts, BoundaryFill(4, 4; fill_value = RGB(1), boundary_value = RGB(1)); closed = true)\n\n\n\n\n\n","category":"function"},{"location":"references/#ImageDraw.draw!","page":"Function References","title":"ImageDraw.draw!","text":"img = draw!(img, drawable, color)\nimg = draw!(img, drawable)\n\nDraws drawable on img using color color which defaults to oneunit(eltype(img))\n\n\n\n\n\nimg = draw!(img, [drawable], [color])\nimg = draw!(img, [drawable] ,color)\nimg = draw!(img, [drawable])\n\nDraws all objects in [drawable] in the given order on img using corresponding colors from [color] which defaults to oneunit(eltype(img)) If only a single color color is specified then all objects will be colored with that color.\n\n\n\n\n\ndraw!(img::AbstractArray{T,2}, verts::Vector{CartesianIndex{2}}, f::AbstractPolyFillAlgorithm; closed::Bool)\n\nDraw on img using algorithm f.\n\nOutput\n\nWhen img is specified, changes are made on img and returned.\n\nExample\n\nJust simply pass an algorithm with parameters, with image and vertices of polygon\n\nusing ImageDraw\n\nimg = zeros(RGB, 7, 7)\nexpected = copy(img)\nexpected[2:6, 2:6] .= RGB{N0f8}(1)\n\nverts = [CartesianIndex(2, 2), CartesianIndex(2, 6), CartesianIndex(6, 6), CartesianIndex(6, 2), CartesianIndex(2,2)]\n\ndraw!(img, verts, BoundaryFill(4, 4; fill_value = RGB(1), boundary_value = RGB(1)); closed = true)\n\n\n\n\n\n","category":"function"},{"location":"references/#ImageDraw.bresenham","page":"Function References","title":"ImageDraw.bresenham","text":"res = bresenham(img, y0, x0, y1, x1, color)\n\nMethod to generate a line profile from (x0,y0) to (x1,y1) of a 2d image using Bresenham's algorithm.\n\n\n\n\n\n","category":"function"},{"location":"references/#ImageDraw.xiaolin_wu","page":"Function References","title":"ImageDraw.xiaolin_wu","text":"res = xiaolin_wu(img, x0, y0, x1, x2, color)\n\nMethod to generate a line profile from (x0,y0) to (x1,y1) of a 2d image using Xiaolin Wu line algorithm.\n\n\n\n\n\n","category":"function"},{"location":"#ImageDraw.jl","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"","category":"section"},{"location":"","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"A drawing package for JuliaImages","category":"page"},{"location":"","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"Depth = 3","category":"page"},{"location":"#Introduction","page":"ImageDraw.jl","title":"Introduction","text":"","category":"section"},{"location":"","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"ImageDraw supports basic drawing on Images. You can draw points, lines, circles, ellipse and paths.  ","category":"page"},{"location":"#Basic-usage","page":"ImageDraw.jl","title":"Basic usage","text":"","category":"section"},{"location":"","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"Let's start with a drawing a circle","category":"page"},{"location":"","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"mkpath(\"images\")","category":"page"},{"location":"","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"using Images, TestImages, ImageDraw\nusing FileIO # hide\nimg = testimage(\"lighthouse\")\n\ndraw!(img, Ellipse(CirclePointRadius(350,200,100)))\nsave(\"images/lighthouse_circle.png\", img); nothing # hide","category":"page"},{"location":"","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"(Image: )","category":"page"},{"location":"","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"Drawing a circle with a thickness","category":"page"},{"location":"","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"img = testimage(\"lighthouse\")\n\n# With keyword argument fill = false, circle with given thickness is computed \ndraw!(img, Ellipse(CirclePointRadius(350, 200, 100; thickness = 75, fill = false)))\nsave(\"images/lighthouse_circle_thickness.png\", img); nothing # hide","category":"page"},{"location":"","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"(Image: )","category":"page"},{"location":"","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"Drawing a Rectangle.","category":"page"},{"location":"","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"img = testimage(\"lighthouse\")\n\nimg_example_stage1 = draw!(img, Polygon(RectanglePoints(Point(10, 10), Point(100, 100))), RGB{N0f8}(1))\nimg_example_stage2 = draw!(img_example_stage1, Polygon(RectanglePoints(CartesianIndex(110, 10), CartesianIndex(200, 200))), RGB{N0f8}(1))\nimg_example_stage3 = draw!(img_example_stage2, Polygon(RectanglePoints(220, 10, 300, 300)), RGB{N0f8}(1))\nsave(\"images/lighthouse_rectangle.png\", img); nothing # hide","category":"page"},{"location":"","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"(Image: )","category":"page"},{"location":"","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"Drawing a Cross.","category":"page"},{"location":"","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"img = testimage(\"lighthouse\")\n\ndraw!(img, Cross(Point(200,150), 50), RGB{N0f8}(0,1,0))\nsave(\"images/lighthouse_cross.png\", img); nothing # hide","category":"page"},{"location":"","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"(Image: )","category":"page"},{"location":"","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"Drawing Lines Segment and Point.","category":"page"},{"location":"","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"img = testimage(\"lighthouse\")\n\np1 = Point(200,150)\np2 = Point(300,100)\np3 = Point(550,250)\n\ndraw!(img, LineTwoPoints(p1,p2), RGB{N0f8}(1,0,0))\ndraw!(img, LineSegment(p1,p2), RGB{N0f8}(0,0,1))\ndraw!(img, LineTwoPoints(p1,p3), RGB{N0f8}(1,0,0))\ndraw!(img, LineSegment(p2,p3), RGB{N0f8}(0,0,1))\n\nfor p in (p1,p2,p3)\n    draw!(img, p, RGB{N0f8}(1))\nend\nsave(\"images/lighthouse_linesegment.png\", img); nothing # hide","category":"page"},{"location":"","page":"ImageDraw.jl","title":"ImageDraw.jl","text":"(Image: )","category":"page"}]
}
